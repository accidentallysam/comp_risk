function [exit_state spell_len X] = create_data(nobs,param)
    T = max(arrayfun(@(x) length(x.bhaz),param));
    J = length(param);
    X = cell(nobs,J);
    t = zeros(nobs,J);
    for j=1:J
        K = length(param(j).b);
        % generate the covariates (values in +/-10)
        X(:,j) = arrayfun(@(x) (2*rand(T,K)-1)*10,(1:nobs)',...
            'UniformOutput',false);
%         X(:,j) = arrayfun(@(x) (2*repmat(rand(1,K),T,1)-1)*10,(1:nobs)',...
%             'UniformOutput',false);
        U = rand(nobs,1);
        % generate the integrated hazards for each time period
        int_haz = cell2mat(...
            arrayfun(@(t)...
                arrayfun(@(x) bhaz(1:t,param(j))'*mult(X{x,j}(1:t,:),...
                        param(j)),...
                    (1:nobs)' ...
                ),...
                1:T,'UniformOutput',false ...
            )...
        );
        % generate the exit times (everyone exits at T+1 by convention)
        exit = [cell2mat(...
            arrayfun(@(x) int_haz(:,x)>-log(U),1:T,...
                'UniformOutput',false))...
            , ones(nobs,1)];
        m = arrayfun(@(x) find([exit(x,:) 1],1),(1:nobs)');
        tindex = m<T+1;
        mindex = (min(m,T)-1)*nobs + (1:nobs)';
        ihmm1 = circshift([int_haz(:,1:end-1) zeros(nobs,1)],[0 1]);
        ihmm1 = ihmm1(mindex(tindex));
        ihm = int_haz(mindex(tindex));
        t(tindex,j)  = (m(tindex)-1)+(-log(U(tindex))-ihmm1)./(ihm-ihmm1);
        t(~tindex,j) = Inf;
    end
    [spell_len, exit_state] = min([t ones(nobs)*T],[],2);
    spell_len = ceil(spell_len); % we only observe grouped data
    % if spell_len==T  exit_state=0; end
end

